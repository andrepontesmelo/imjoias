//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Apresentação.Financeiro.Venda.Impressão {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSetVenda")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSetVenda : System.Data.DataSet {
        
        private InformaçõesDataTable tableInformações;
        
        private ItensDataTable tableItens;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSetVenda() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSetVenda(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Informações"] != null)) {
                    base.Tables.Add(new InformaçõesDataTable(ds.Tables["Informações"]));
                }
                if ((ds.Tables["Itens"] != null)) {
                    base.Tables.Add(new ItensDataTable(ds.Tables["Itens"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InformaçõesDataTable Informações {
            get {
                return this.tableInformações;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ItensDataTable Itens {
            get {
                return this.tableItens;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataSetVenda cln = ((DataSetVenda)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Informações"] != null)) {
                    base.Tables.Add(new InformaçõesDataTable(ds.Tables["Informações"]));
                }
                if ((ds.Tables["Itens"] != null)) {
                    base.Tables.Add(new ItensDataTable(ds.Tables["Itens"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableInformações = ((InformaçõesDataTable)(base.Tables["Informações"]));
            if ((initTable == true)) {
                if ((this.tableInformações != null)) {
                    this.tableInformações.InitVars();
                }
            }
            this.tableItens = ((ItensDataTable)(base.Tables["Itens"]));
            if ((initTable == true)) {
                if ((this.tableItens != null)) {
                    this.tableItens.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSetVenda";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetVenda.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableInformações = new InformaçõesDataTable();
            base.Tables.Add(this.tableInformações);
            this.tableItens = new ItensDataTable();
            base.Tables.Add(this.tableItens);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInformações() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeItens() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSetVenda ds = new DataSetVenda();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void InformaçõesRowChangeEventHandler(object sender, InformaçõesRowChangeEvent e);
        
        public delegate void ItensRowChangeEventHandler(object sender, ItensRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InformaçõesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnvendedor;
            
            private System.Data.DataColumn columncliente;
            
            private System.Data.DataColumn columndata;
            
            private System.Data.DataColumn columncotação;
            
            private System.Data.DataColumn columncontrole;
            
            private System.Data.DataColumn columnvalorTotal;
            
            private System.Data.DataColumn columnvalorTotalVendido;
            
            private System.Data.DataColumn columnvalorTotalDevolvido;
            
            private System.Data.DataColumn columntotalPesoVendidoSóDePeso;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InformaçõesDataTable() {
                this.TableName = "Informações";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InformaçõesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InformaçõesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn vendedorColumn {
                get {
                    return this.columnvendedor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn clienteColumn {
                get {
                    return this.columncliente;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dataColumn {
                get {
                    return this.columndata;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cotaçãoColumn {
                get {
                    return this.columncotação;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn controleColumn {
                get {
                    return this.columncontrole;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn valorTotalColumn {
                get {
                    return this.columnvalorTotal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn valorTotalVendidoColumn {
                get {
                    return this.columnvalorTotalVendido;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn valorTotalDevolvidoColumn {
                get {
                    return this.columnvalorTotalDevolvido;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn totalPesoVendidoSóDePesoColumn {
                get {
                    return this.columntotalPesoVendidoSóDePeso;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InformaçõesRow this[int index] {
                get {
                    return ((InformaçõesRow)(this.Rows[index]));
                }
            }
            
            public event InformaçõesRowChangeEventHandler InformaçõesRowChanging;
            
            public event InformaçõesRowChangeEventHandler InformaçõesRowChanged;
            
            public event InformaçõesRowChangeEventHandler InformaçõesRowDeleting;
            
            public event InformaçõesRowChangeEventHandler InformaçõesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInformaçõesRow(InformaçõesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InformaçõesRow AddInformaçõesRow(string vendedor, string cliente, string data, string cotação, string controle, string valorTotal, string valorTotalVendido, string valorTotalDevolvido, string totalPesoVendidoSóDePeso) {
                InformaçõesRow rowInformaçõesRow = ((InformaçõesRow)(this.NewRow()));
                rowInformaçõesRow.ItemArray = new object[] {
                        vendedor,
                        cliente,
                        data,
                        cotação,
                        controle,
                        valorTotal,
                        valorTotalVendido,
                        valorTotalDevolvido,
                        totalPesoVendidoSóDePeso};
                this.Rows.Add(rowInformaçõesRow);
                return rowInformaçõesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                InformaçõesDataTable cln = ((InformaçõesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new InformaçõesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnvendedor = base.Columns["vendedor"];
                this.columncliente = base.Columns["cliente"];
                this.columndata = base.Columns["data"];
                this.columncotação = base.Columns["cotação"];
                this.columncontrole = base.Columns["controle"];
                this.columnvalorTotal = base.Columns["valorTotal"];
                this.columnvalorTotalVendido = base.Columns["valorTotalVendido"];
                this.columnvalorTotalDevolvido = base.Columns["valorTotalDevolvido"];
                this.columntotalPesoVendidoSóDePeso = base.Columns["totalPesoVendidoSóDePeso"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnvendedor = new System.Data.DataColumn("vendedor", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvendedor);
                this.columncliente = new System.Data.DataColumn("cliente", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncliente);
                this.columndata = new System.Data.DataColumn("data", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndata);
                this.columncotação = new System.Data.DataColumn("cotação", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncotação);
                this.columncontrole = new System.Data.DataColumn("controle", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncontrole);
                this.columnvalorTotal = new System.Data.DataColumn("valorTotal", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalorTotal);
                this.columnvalorTotalVendido = new System.Data.DataColumn("valorTotalVendido", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalorTotalVendido);
                this.columnvalorTotalDevolvido = new System.Data.DataColumn("valorTotalDevolvido", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalorTotalDevolvido);
                this.columntotalPesoVendidoSóDePeso = new System.Data.DataColumn("totalPesoVendidoSóDePeso", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalPesoVendidoSóDePeso);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InformaçõesRow NewInformaçõesRow() {
                return ((InformaçõesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new InformaçõesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(InformaçõesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InformaçõesRowChanged != null)) {
                    this.InformaçõesRowChanged(this, new InformaçõesRowChangeEvent(((InformaçõesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InformaçõesRowChanging != null)) {
                    this.InformaçõesRowChanging(this, new InformaçõesRowChangeEvent(((InformaçõesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InformaçõesRowDeleted != null)) {
                    this.InformaçõesRowDeleted(this, new InformaçõesRowChangeEvent(((InformaçõesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InformaçõesRowDeleting != null)) {
                    this.InformaçõesRowDeleting(this, new InformaçõesRowChangeEvent(((InformaçõesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInformaçõesRow(InformaçõesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetVenda ds = new DataSetVenda();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InformaçõesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ItensDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnreferência;
            
            private System.Data.DataColumn columnpeso;
            
            private System.Data.DataColumn columnquantidade;
            
            private System.Data.DataColumn columníndice;
            
            private System.Data.DataColumn columnfaixaGrupo;
            
            private System.Data.DataColumn columndevolvido;
            
            private System.Data.DataColumn columndescrição;
            
            private System.Data.DataColumn columnvalorUnitário;
            
            private System.Data.DataColumn columnvalorTotal;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItensDataTable() {
                this.TableName = "Itens";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItensDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ItensDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn referênciaColumn {
                get {
                    return this.columnreferência;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pesoColumn {
                get {
                    return this.columnpeso;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn quantidadeColumn {
                get {
                    return this.columnquantidade;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn índiceColumn {
                get {
                    return this.columníndice;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn faixaGrupoColumn {
                get {
                    return this.columnfaixaGrupo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn devolvidoColumn {
                get {
                    return this.columndevolvido;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descriçãoColumn {
                get {
                    return this.columndescrição;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn valorUnitárioColumn {
                get {
                    return this.columnvalorUnitário;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn valorTotalColumn {
                get {
                    return this.columnvalorTotal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItensRow this[int index] {
                get {
                    return ((ItensRow)(this.Rows[index]));
                }
            }
            
            public event ItensRowChangeEventHandler ItensRowChanging;
            
            public event ItensRowChangeEventHandler ItensRowChanged;
            
            public event ItensRowChangeEventHandler ItensRowDeleting;
            
            public event ItensRowChangeEventHandler ItensRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddItensRow(ItensRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItensRow AddItensRow(string referência, string peso, string quantidade, string índice, string faixaGrupo, bool devolvido, string descrição, string valorUnitário, string valorTotal) {
                ItensRow rowItensRow = ((ItensRow)(this.NewRow()));
                rowItensRow.ItemArray = new object[] {
                        referência,
                        peso,
                        quantidade,
                        índice,
                        faixaGrupo,
                        devolvido,
                        descrição,
                        valorUnitário,
                        valorTotal};
                this.Rows.Add(rowItensRow);
                return rowItensRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ItensDataTable cln = ((ItensDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ItensDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnreferência = base.Columns["referência"];
                this.columnpeso = base.Columns["peso"];
                this.columnquantidade = base.Columns["quantidade"];
                this.columníndice = base.Columns["índice"];
                this.columnfaixaGrupo = base.Columns["faixaGrupo"];
                this.columndevolvido = base.Columns["devolvido"];
                this.columndescrição = base.Columns["descrição"];
                this.columnvalorUnitário = base.Columns["valorUnitário"];
                this.columnvalorTotal = base.Columns["valorTotal"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnreferência = new System.Data.DataColumn("referência", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnreferência);
                this.columnpeso = new System.Data.DataColumn("peso", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpeso);
                this.columnquantidade = new System.Data.DataColumn("quantidade", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnquantidade);
                this.columníndice = new System.Data.DataColumn("índice", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columníndice);
                this.columnfaixaGrupo = new System.Data.DataColumn("faixaGrupo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfaixaGrupo);
                this.columndevolvido = new System.Data.DataColumn("devolvido", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndevolvido);
                this.columndescrição = new System.Data.DataColumn("descrição", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescrição);
                this.columnvalorUnitário = new System.Data.DataColumn("valorUnitário", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalorUnitário);
                this.columnvalorTotal = new System.Data.DataColumn("valorTotal", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalorTotal);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItensRow NewItensRow() {
                return ((ItensRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ItensRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ItensRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ItensRowChanged != null)) {
                    this.ItensRowChanged(this, new ItensRowChangeEvent(((ItensRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ItensRowChanging != null)) {
                    this.ItensRowChanging(this, new ItensRowChangeEvent(((ItensRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ItensRowDeleted != null)) {
                    this.ItensRowDeleted(this, new ItensRowChangeEvent(((ItensRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ItensRowDeleting != null)) {
                    this.ItensRowDeleting(this, new ItensRowChangeEvent(((ItensRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveItensRow(ItensRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetVenda ds = new DataSetVenda();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ItensDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InformaçõesRow : System.Data.DataRow {
            
            private InformaçõesDataTable tableInformações;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InformaçõesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInformações = ((InformaçõesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string vendedor {
                get {
                    try {
                        return ((string)(this[this.tableInformações.vendedorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'vendedor\' in table \'Informações\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInformações.vendedorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cliente {
                get {
                    try {
                        return ((string)(this[this.tableInformações.clienteColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cliente\' in table \'Informações\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInformações.clienteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string data {
                get {
                    try {
                        return ((string)(this[this.tableInformações.dataColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'data\' in table \'Informações\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInformações.dataColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cotação {
                get {
                    try {
                        return ((string)(this[this.tableInformações.cotaçãoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cotação\' in table \'Informações\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInformações.cotaçãoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string controle {
                get {
                    try {
                        return ((string)(this[this.tableInformações.controleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'controle\' in table \'Informações\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInformações.controleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string valorTotal {
                get {
                    try {
                        return ((string)(this[this.tableInformações.valorTotalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'valorTotal\' in table \'Informações\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInformações.valorTotalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string valorTotalVendido {
                get {
                    try {
                        return ((string)(this[this.tableInformações.valorTotalVendidoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'valorTotalVendido\' in table \'Informações\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInformações.valorTotalVendidoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string valorTotalDevolvido {
                get {
                    try {
                        return ((string)(this[this.tableInformações.valorTotalDevolvidoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'valorTotalDevolvido\' in table \'Informações\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInformações.valorTotalDevolvidoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string totalPesoVendidoSóDePeso {
                get {
                    try {
                        return ((string)(this[this.tableInformações.totalPesoVendidoSóDePesoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'totalPesoVendidoSóDePeso\' in table \'Informações\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableInformações.totalPesoVendidoSóDePesoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvendedorNull() {
                return this.IsNull(this.tableInformações.vendedorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvendedorNull() {
                this[this.tableInformações.vendedorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclienteNull() {
                return this.IsNull(this.tableInformações.clienteColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclienteNull() {
                this[this.tableInformações.clienteColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdataNull() {
                return this.IsNull(this.tableInformações.dataColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdataNull() {
                this[this.tableInformações.dataColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscotaçãoNull() {
                return this.IsNull(this.tableInformações.cotaçãoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcotaçãoNull() {
                this[this.tableInformações.cotaçãoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscontroleNull() {
                return this.IsNull(this.tableInformações.controleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcontroleNull() {
                this[this.tableInformações.controleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalorTotalNull() {
                return this.IsNull(this.tableInformações.valorTotalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalorTotalNull() {
                this[this.tableInformações.valorTotalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalorTotalVendidoNull() {
                return this.IsNull(this.tableInformações.valorTotalVendidoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalorTotalVendidoNull() {
                this[this.tableInformações.valorTotalVendidoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalorTotalDevolvidoNull() {
                return this.IsNull(this.tableInformações.valorTotalDevolvidoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalorTotalDevolvidoNull() {
                this[this.tableInformações.valorTotalDevolvidoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalPesoVendidoSóDePesoNull() {
                return this.IsNull(this.tableInformações.totalPesoVendidoSóDePesoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalPesoVendidoSóDePesoNull() {
                this[this.tableInformações.totalPesoVendidoSóDePesoColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ItensRow : System.Data.DataRow {
            
            private ItensDataTable tableItens;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItensRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableItens = ((ItensDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string referência {
                get {
                    try {
                        return ((string)(this[this.tableItens.referênciaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'referência\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.referênciaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string peso {
                get {
                    try {
                        return ((string)(this[this.tableItens.pesoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'peso\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.pesoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string quantidade {
                get {
                    try {
                        return ((string)(this[this.tableItens.quantidadeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'quantidade\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.quantidadeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string índice {
                get {
                    try {
                        return ((string)(this[this.tableItens.índiceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'índice\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.índiceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string faixaGrupo {
                get {
                    try {
                        return ((string)(this[this.tableItens.faixaGrupoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'faixaGrupo\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.faixaGrupoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool devolvido {
                get {
                    try {
                        return ((bool)(this[this.tableItens.devolvidoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'devolvido\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.devolvidoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string descrição {
                get {
                    try {
                        return ((string)(this[this.tableItens.descriçãoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'descrição\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.descriçãoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string valorUnitário {
                get {
                    try {
                        return ((string)(this[this.tableItens.valorUnitárioColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'valorUnitário\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.valorUnitárioColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string valorTotal {
                get {
                    try {
                        return ((string)(this[this.tableItens.valorTotalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'valorTotal\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.valorTotalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreferênciaNull() {
                return this.IsNull(this.tableItens.referênciaColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreferênciaNull() {
                this[this.tableItens.referênciaColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspesoNull() {
                return this.IsNull(this.tableItens.pesoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpesoNull() {
                this[this.tableItens.pesoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsquantidadeNull() {
                return this.IsNull(this.tableItens.quantidadeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetquantidadeNull() {
                this[this.tableItens.quantidadeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsíndiceNull() {
                return this.IsNull(this.tableItens.índiceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetíndiceNull() {
                this[this.tableItens.índiceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfaixaGrupoNull() {
                return this.IsNull(this.tableItens.faixaGrupoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfaixaGrupoNull() {
                this[this.tableItens.faixaGrupoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdevolvidoNull() {
                return this.IsNull(this.tableItens.devolvidoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdevolvidoNull() {
                this[this.tableItens.devolvidoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriçãoNull() {
                return this.IsNull(this.tableItens.descriçãoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriçãoNull() {
                this[this.tableItens.descriçãoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalorUnitárioNull() {
                return this.IsNull(this.tableItens.valorUnitárioColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalorUnitárioNull() {
                this[this.tableItens.valorUnitárioColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalorTotalNull() {
                return this.IsNull(this.tableItens.valorTotalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalorTotalNull() {
                this[this.tableItens.valorTotalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InformaçõesRowChangeEvent : System.EventArgs {
            
            private InformaçõesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InformaçõesRowChangeEvent(InformaçõesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InformaçõesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ItensRowChangeEvent : System.EventArgs {
            
            private ItensRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItensRowChangeEvent(ItensRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItensRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591