<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picÍcone.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        R0lGODlhOQA5APcAAA4ODgsLDQ4PEQ8QEhEQERARExITExESFBITFRMUFhIUFhQVFxQVFhUVFhMUFRMW
        GBUWGBYXGRUWGRcYGhQeHhkaGhobHR4fISEhIiMkJS0tLioqKycoKS4vMTMzNDw8PDY3OT5GQEJDREtL
        S0ZHSFNUVFpbW1lWVlJTT19fX2xYaGRkZGtrbHV0c3t7e3ZrdI1ZL5RcLY5eNZJeMpJfNI5gOpJgNpRh
        NpZgMZpiMpNjO5p2WZNsS5t+ZZd7ZIN9eYNrfZ2Ke5+DaqeIbaGMerCUe35/gZxTjpxbjp5Wkp9Skp9b
        kp5OjaNUj6RajqJOk6tOmaZRkqJVkqVVkqFVlaRWlKVWlaZVlqNSlKpTlKNck6ZUmalUmadcmZ1pkp53
        lp5ijaJilqFslKpimqR0lqh5mq5ql7d4pqt3ooOEhIuLjIaIhpCOjZSUlJycnJeYmK6ai7GZhKODmqud
        k6ScmraEnrqhi72nlquIpLWFq6ubqKuXprOUqLiYsaSkpaurq6mnprKorq6tsbeptba2tLq6ub29vLm0
        trKyscaumtOxl+u2mvS7nfe6m8WYqMeXu8OMrMe1p8WrvcG9vcW5t9iqpe29pOa5pvW8o/m9o/W+qOO+
        sbvCu/bAnsjDvdnGtuzBquvDpfPFp+nKt/TGtqarxLm9yau10aS8ydKuzMa4xNa4zNy71cujxOG/3JvG
        3bbC1pjH5Y3L6Lba7cHBwcXFxcXEwsbIycrKys3NzMfHx9TIx83QzdPRz93TzsjO1czU09HR0dbW1tTV
        0tra2d3e3dvd2tjY1tfE0+bPw/LTxefY1ffe1+/PwN3j3OPj3Org1/rl2Pnhz8bV4+vY6OfN4tzm5uLh
        4uXl5uTl5Ojm5enq5unp6e7u7uzs6ubp6/Xp5uny7Pny6ubs8vXs8ezy8vHx8vL19fb29vX19fT08vj0
        9fX59fv69Pv0+vv7+/j5+P36+vr++v79+v76/vr+/vz8/P39/f38/f/9//3///7+/v////////7+/fb8
        /CH5BAEAAPwALAAAAAA5ADkAAAj/APkJHEiw4L6D+/i9UweuWShRopqBuyevoLx6/vzt05fR3z19BUOK
        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
</value>
  </data>
</root>