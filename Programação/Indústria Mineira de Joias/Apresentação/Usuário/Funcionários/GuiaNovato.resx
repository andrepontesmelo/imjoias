<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label28.Text" xml:space="preserve">
    <value>Como no padrão dos sistemas para Windows, sempre que você quiser pular para o campo seguinte, utilize a tecla TAB (experimente ao lado).

Cuidado com a tecla ENTER! Veja o botão escrito "Enter" que está iluminado. Sempre que um botão estiver iluminado como aquele, a tecla "Enter" irá pressioná-lo, mesmo que você esteja preenchendo um campo.</value>
  </data>
  <data name="label18.Text" xml:space="preserve">
    <value>A barra de ferramentas permite a você navegar pelas funcionalidades do sistema.

Para ver a descrição do botão, isto é, o nome da ferramenta que você pode navegar, passe o mouse sobre o ícone (desenho) do botão. Para iniciar a ferramenta, basta clicar sobre ele.

(Dica: Experimente no exemplo acima! Deslize o mouse sobre a área alaranjada)</value>
  </data>
  <data name="label19.Text" xml:space="preserve">
    <value>A tela contextual está contida na base inferior da janela, ou seja, na parte debaixo da tela. Nela é exibida todas as telas da ferramenta que você iniciou clicando na barra de ferramentas exemplificada anteriormente.

A maioria das telas contextuais apresentam um título e uma breve descrição apontando a tarefa que você está desempenhando.

Ao lado esquerdo da tela contextual existe a barra de opções de contexto. Veja mais detalhes a seguir.</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="opção1.Imagem" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAIxJREFUOE+lUwEK
        wCAIrJ/3c4exRO80YRsES73rtGuO/JMiPou4hRUoaw0RiUtjmntXymMFCD57R0AKPfv+RxIAkxIi8G2A
        fGqFwOe0QjrWh+GE5G+Com9W0E29yfPEFeAHl/lCa44nUuOg/IuxtqnCvVe9exJ0pJmnG5yT3ruxIbu/
        hy9gz1i5k059AGiNRdPpF49mAAAAAElFTkSuQmCC
</value>
  </data>
  <data name="label21.Text" xml:space="preserve">
    <value>A barra de opções de contexto se localiza à esquerda da janela.

Nesta barra, você encontrará textos informativos e opções acerca da ferramenta que você estiver utilizando.

Sempre que você precisar fazer alguma modificação ou operação diferente, mas que estiver no contexto do seu trabalho, procure esta funcionalidade na barra da esquerda. Se o que você deseja não tem nenhuma relação com o que você está trabalhando no momento, então você deve navegar pela barra de ferramentas vista anteriormente.</value>
  </data>
  <data name="label31.Text" xml:space="preserve">
    <value>À direita temos o campo de preenchimento de mercadoria. Este campo aceita tanto a digitação manual ou por meio do uso do leitor de código de barras.

Experimente digitar algumas mercadorias!

Você não precisa digitar completamente a referência. No caso específico da referência, basta pressionar "Enter" que ela será completada automaticamente pela referência mais próxima cadastrada.

No caso de uso do leitor de código de barras, certifique-se de que o campo esteja completamente vazio, senão uma referência inválida será gerada.</value>
  </data>
  <data name="label36.Text" xml:space="preserve">
    <value>Como durante o preenchimento de mercadoria você está usando a mão direita, fugimos um pouco da regra do uso de "TAB" e permitimos que no quadro de mercadoria, como o ao lado, você pode usar "Enter" para passar para o próximo campo.

Veja que isso só é possível neste quadro de preenchimento de mercadoria! Nos demais casos, esteja atento ao botão destacado que sempre terá prioridade ao "Enter", quando houver. Na dúvida, sempre utilize a tecla "TAB".</value>
  </data>
  <data name="label38.Text" xml:space="preserve">
    <value>Cuidado ao imprimir documentos. Para evitar que existam documentos divergentes do sistema, após impressão, o sistema irá bloquear alterações no documento. Somente funcionários autorizados poderão destravá-los.</value>
  </data>
</root>