//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Apresentação.Pedido.Impressão {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Dataset : DataSet {
        
        private PedidoDataTable tablePedido;
        
        public Dataset() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Dataset(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Pedido"] != null)) {
                    this.Tables.Add(new PedidoDataTable(ds.Tables["Pedido"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PedidoDataTable Pedido {
            get {
                return this.tablePedido;
            }
        }
        
        public override DataSet Clone() {
            Dataset cln = ((Dataset)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Pedido"] != null)) {
                this.Tables.Add(new PedidoDataTable(ds.Tables["Pedido"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePedido = ((PedidoDataTable)(this.Tables["Pedido"]));
            if ((this.tablePedido != null)) {
                this.tablePedido.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Dataset";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Dataset.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePedido = new PedidoDataTable();
            this.Tables.Add(this.tablePedido);
        }
        
        private bool ShouldSerializePedido() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void PedidoRowChangeEventHandler(object sender, PedidoRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PedidoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnreferencia;
            
            private DataColumn columnpeso;
            
            private DataColumn columnindice;
            
            private DataColumn columnquantidade;
            
            internal PedidoDataTable() : 
                    base("Pedido") {
                this.InitClass();
            }
            
            internal PedidoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn referenciaColumn {
                get {
                    return this.columnreferencia;
                }
            }
            
            internal DataColumn pesoColumn {
                get {
                    return this.columnpeso;
                }
            }
            
            internal DataColumn indiceColumn {
                get {
                    return this.columnindice;
                }
            }
            
            internal DataColumn quantidadeColumn {
                get {
                    return this.columnquantidade;
                }
            }
            
            public PedidoRow this[int index] {
                get {
                    return ((PedidoRow)(this.Rows[index]));
                }
            }
            
            public event PedidoRowChangeEventHandler PedidoRowChanged;
            
            public event PedidoRowChangeEventHandler PedidoRowChanging;
            
            public event PedidoRowChangeEventHandler PedidoRowDeleted;
            
            public event PedidoRowChangeEventHandler PedidoRowDeleting;
            
            public void AddPedidoRow(PedidoRow row) {
                this.Rows.Add(row);
            }
            
            public PedidoRow AddPedidoRow(string referencia, System.Double peso, System.Double indice, System.Double quantidade) {
                PedidoRow rowPedidoRow = ((PedidoRow)(this.NewRow()));
                rowPedidoRow.ItemArray = new object[] {
                        referencia,
                        peso,
                        indice,
                        quantidade};
                this.Rows.Add(rowPedidoRow);
                return rowPedidoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PedidoDataTable cln = ((PedidoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PedidoDataTable();
            }
            
            internal void InitVars() {
                this.columnreferencia = this.Columns["referencia"];
                this.columnpeso = this.Columns["peso"];
                this.columnindice = this.Columns["indice"];
                this.columnquantidade = this.Columns["quantidade"];
            }
            
            private void InitClass() {
                this.columnreferencia = new DataColumn("referencia", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnreferencia);
                this.columnpeso = new DataColumn("peso", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpeso);
                this.columnindice = new DataColumn("indice", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnindice);
                this.columnquantidade = new DataColumn("quantidade", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnquantidade);
            }
            
            public PedidoRow NewPedidoRow() {
                return ((PedidoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PedidoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PedidoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PedidoRowChanged != null)) {
                    this.PedidoRowChanged(this, new PedidoRowChangeEvent(((PedidoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PedidoRowChanging != null)) {
                    this.PedidoRowChanging(this, new PedidoRowChangeEvent(((PedidoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PedidoRowDeleted != null)) {
                    this.PedidoRowDeleted(this, new PedidoRowChangeEvent(((PedidoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PedidoRowDeleting != null)) {
                    this.PedidoRowDeleting(this, new PedidoRowChangeEvent(((PedidoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePedidoRow(PedidoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PedidoRow : DataRow {
            
            private PedidoDataTable tablePedido;
            
            internal PedidoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePedido = ((PedidoDataTable)(this.Table));
            }
            
            public string referencia {
                get {
                    try {
                        return ((string)(this[this.tablePedido.referenciaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePedido.referenciaColumn] = value;
                }
            }
            
            public System.Double peso {
                get {
                    try {
                        return ((System.Double)(this[this.tablePedido.pesoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePedido.pesoColumn] = value;
                }
            }
            
            public System.Double indice {
                get {
                    try {
                        return ((System.Double)(this[this.tablePedido.indiceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePedido.indiceColumn] = value;
                }
            }
            
            public System.Double quantidade {
                get {
                    try {
                        return ((System.Double)(this[this.tablePedido.quantidadeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePedido.quantidadeColumn] = value;
                }
            }
            
            public bool IsreferenciaNull() {
                return this.IsNull(this.tablePedido.referenciaColumn);
            }
            
            public void SetreferenciaNull() {
                this[this.tablePedido.referenciaColumn] = System.Convert.DBNull;
            }
            
            public bool IspesoNull() {
                return this.IsNull(this.tablePedido.pesoColumn);
            }
            
            public void SetpesoNull() {
                this[this.tablePedido.pesoColumn] = System.Convert.DBNull;
            }
            
            public bool IsindiceNull() {
                return this.IsNull(this.tablePedido.indiceColumn);
            }
            
            public void SetindiceNull() {
                this[this.tablePedido.indiceColumn] = System.Convert.DBNull;
            }
            
            public bool IsquantidadeNull() {
                return this.IsNull(this.tablePedido.quantidadeColumn);
            }
            
            public void SetquantidadeNull() {
                this[this.tablePedido.quantidadeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PedidoRowChangeEvent : EventArgs {
            
            private PedidoRow eventRow;
            
            private DataRowAction eventAction;
            
            public PedidoRowChangeEvent(PedidoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PedidoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
