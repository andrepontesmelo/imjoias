//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Apresentação.Financeiro.Acerto.Impressão {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSetAcerto")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSetAcerto : System.Data.DataSet {
        
        private InformaçõesDataTable tableInformações;
        
        private ItensDataTable tableItens;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSetAcerto() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSetAcerto(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Informações"] != null)) {
                    base.Tables.Add(new InformaçõesDataTable(ds.Tables["Informações"]));
                }
                if ((ds.Tables["Itens"] != null)) {
                    base.Tables.Add(new ItensDataTable(ds.Tables["Itens"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InformaçõesDataTable Informações {
            get {
                return this.tableInformações;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ItensDataTable Itens {
            get {
                return this.tableItens;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataSetAcerto cln = ((DataSetAcerto)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Informações"] != null)) {
                    base.Tables.Add(new InformaçõesDataTable(ds.Tables["Informações"]));
                }
                if ((ds.Tables["Itens"] != null)) {
                    base.Tables.Add(new ItensDataTable(ds.Tables["Itens"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableInformações = ((InformaçõesDataTable)(base.Tables["Informações"]));
            if ((initTable == true)) {
                if ((this.tableInformações != null)) {
                    this.tableInformações.InitVars();
                }
            }
            this.tableItens = ((ItensDataTable)(base.Tables["Itens"]));
            if ((initTable == true)) {
                if ((this.tableItens != null)) {
                    this.tableItens.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSetAcerto";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetAcerto.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableInformações = new InformaçõesDataTable();
            base.Tables.Add(this.tableInformações);
            this.tableItens = new ItensDataTable();
            base.Tables.Add(this.tableItens);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInformações() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeItens() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSetAcerto ds = new DataSetAcerto();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void InformaçõesRowChangeEventHandler(object sender, InformaçõesRowChangeEvent e);
        
        public delegate void ItensRowChangeEventHandler(object sender, ItensRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InformaçõesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnpessoa;
            
            private System.Data.DataColumn columnfuncionário;
            
            private System.Data.DataColumn columnsaídas;
            
            private System.Data.DataColumn columnretornos;
            
            private System.Data.DataColumn columnvendas;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InformaçõesDataTable() {
                this.TableName = "Informações";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InformaçõesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InformaçõesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pessoaColumn {
                get {
                    return this.columnpessoa;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn funcionárioColumn {
                get {
                    return this.columnfuncionário;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn saídasColumn {
                get {
                    return this.columnsaídas;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn retornosColumn {
                get {
                    return this.columnretornos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn vendasColumn {
                get {
                    return this.columnvendas;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InformaçõesRow this[int index] {
                get {
                    return ((InformaçõesRow)(this.Rows[index]));
                }
            }
            
            public event InformaçõesRowChangeEventHandler InformaçõesRowChanging;
            
            public event InformaçõesRowChangeEventHandler InformaçõesRowChanged;
            
            public event InformaçõesRowChangeEventHandler InformaçõesRowDeleting;
            
            public event InformaçõesRowChangeEventHandler InformaçõesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInformaçõesRow(InformaçõesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InformaçõesRow AddInformaçõesRow(string pessoa, string funcionário, string saídas, string retornos, string vendas) {
                InformaçõesRow rowInformaçõesRow = ((InformaçõesRow)(this.NewRow()));
                rowInformaçõesRow.ItemArray = new object[] {
                        pessoa,
                        funcionário,
                        saídas,
                        retornos,
                        vendas};
                this.Rows.Add(rowInformaçõesRow);
                return rowInformaçõesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                InformaçõesDataTable cln = ((InformaçõesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new InformaçõesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpessoa = base.Columns["pessoa"];
                this.columnfuncionário = base.Columns["funcionário"];
                this.columnsaídas = base.Columns["saídas"];
                this.columnretornos = base.Columns["retornos"];
                this.columnvendas = base.Columns["vendas"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpessoa = new System.Data.DataColumn("pessoa", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpessoa);
                this.columnfuncionário = new System.Data.DataColumn("funcionário", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfuncionário);
                this.columnsaídas = new System.Data.DataColumn("saídas", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsaídas);
                this.columnretornos = new System.Data.DataColumn("retornos", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnretornos);
                this.columnvendas = new System.Data.DataColumn("vendas", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvendas);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InformaçõesRow NewInformaçõesRow() {
                return ((InformaçõesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new InformaçõesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(InformaçõesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InformaçõesRowChanged != null)) {
                    this.InformaçõesRowChanged(this, new InformaçõesRowChangeEvent(((InformaçõesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InformaçõesRowChanging != null)) {
                    this.InformaçõesRowChanging(this, new InformaçõesRowChangeEvent(((InformaçõesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InformaçõesRowDeleted != null)) {
                    this.InformaçõesRowDeleted(this, new InformaçõesRowChangeEvent(((InformaçõesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InformaçõesRowDeleting != null)) {
                    this.InformaçõesRowDeleting(this, new InformaçõesRowChangeEvent(((InformaçõesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInformaçõesRow(InformaçõesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetAcerto ds = new DataSetAcerto();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InformaçõesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ItensDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnreferência;
            
            private System.Data.DataColumn columnpeso;
            
            private System.Data.DataColumn columníndice;
            
            private System.Data.DataColumn columnsaída;
            
            private System.Data.DataColumn columnretorno;
            
            private System.Data.DataColumn columnvenda;
            
            private System.Data.DataColumn columngrupo;
            
            private System.Data.DataColumn columnfaixa;
            
            private System.Data.DataColumn columndescrição;
            
            private System.Data.DataColumn columnacerto;
            
            private System.Data.DataColumn columndepeso;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItensDataTable() {
                this.TableName = "Itens";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItensDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ItensDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn referênciaColumn {
                get {
                    return this.columnreferência;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pesoColumn {
                get {
                    return this.columnpeso;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn índiceColumn {
                get {
                    return this.columníndice;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn saídaColumn {
                get {
                    return this.columnsaída;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn retornoColumn {
                get {
                    return this.columnretorno;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn vendaColumn {
                get {
                    return this.columnvenda;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn grupoColumn {
                get {
                    return this.columngrupo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn faixaColumn {
                get {
                    return this.columnfaixa;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descriçãoColumn {
                get {
                    return this.columndescrição;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn acertoColumn {
                get {
                    return this.columnacerto;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn depesoColumn {
                get {
                    return this.columndepeso;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItensRow this[int index] {
                get {
                    return ((ItensRow)(this.Rows[index]));
                }
            }
            
            public event ItensRowChangeEventHandler ItensRowChanging;
            
            public event ItensRowChangeEventHandler ItensRowChanged;
            
            public event ItensRowChangeEventHandler ItensRowDeleting;
            
            public event ItensRowChangeEventHandler ItensRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddItensRow(ItensRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItensRow AddItensRow(string referência, string peso, string índice, string saída, string retorno, string venda, string grupo, string faixa, string descrição, string acerto, bool depeso) {
                ItensRow rowItensRow = ((ItensRow)(this.NewRow()));
                rowItensRow.ItemArray = new object[] {
                        referência,
                        peso,
                        índice,
                        saída,
                        retorno,
                        venda,
                        grupo,
                        faixa,
                        descrição,
                        acerto,
                        depeso};
                this.Rows.Add(rowItensRow);
                return rowItensRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ItensDataTable cln = ((ItensDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ItensDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnreferência = base.Columns["referência"];
                this.columnpeso = base.Columns["peso"];
                this.columníndice = base.Columns["índice"];
                this.columnsaída = base.Columns["saída"];
                this.columnretorno = base.Columns["retorno"];
                this.columnvenda = base.Columns["venda"];
                this.columngrupo = base.Columns["grupo"];
                this.columnfaixa = base.Columns["faixa"];
                this.columndescrição = base.Columns["descrição"];
                this.columnacerto = base.Columns["acerto"];
                this.columndepeso = base.Columns["depeso"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnreferência = new System.Data.DataColumn("referência", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnreferência);
                this.columnpeso = new System.Data.DataColumn("peso", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpeso);
                this.columníndice = new System.Data.DataColumn("índice", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columníndice);
                this.columnsaída = new System.Data.DataColumn("saída", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsaída);
                this.columnretorno = new System.Data.DataColumn("retorno", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnretorno);
                this.columnvenda = new System.Data.DataColumn("venda", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvenda);
                this.columngrupo = new System.Data.DataColumn("grupo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngrupo);
                this.columnfaixa = new System.Data.DataColumn("faixa", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfaixa);
                this.columndescrição = new System.Data.DataColumn("descrição", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescrição);
                this.columnacerto = new System.Data.DataColumn("acerto", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnacerto);
                this.columndepeso = new System.Data.DataColumn("depeso", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndepeso);
                this.columndepeso.DefaultValue = ((bool)(false));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItensRow NewItensRow() {
                return ((ItensRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ItensRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ItensRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ItensRowChanged != null)) {
                    this.ItensRowChanged(this, new ItensRowChangeEvent(((ItensRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ItensRowChanging != null)) {
                    this.ItensRowChanging(this, new ItensRowChangeEvent(((ItensRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ItensRowDeleted != null)) {
                    this.ItensRowDeleted(this, new ItensRowChangeEvent(((ItensRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ItensRowDeleting != null)) {
                    this.ItensRowDeleting(this, new ItensRowChangeEvent(((ItensRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveItensRow(ItensRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetAcerto ds = new DataSetAcerto();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ItensDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InformaçõesRow : System.Data.DataRow {
            
            private InformaçõesDataTable tableInformações;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InformaçõesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInformações = ((InformaçõesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pessoa {
                get {
                    try {
                        return ((string)(this[this.tableInformações.pessoaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'pessoa\' in table \'Informações\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInformações.pessoaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string funcionário {
                get {
                    try {
                        return ((string)(this[this.tableInformações.funcionárioColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'funcionário\' in table \'Informações\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInformações.funcionárioColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string saídas {
                get {
                    try {
                        return ((string)(this[this.tableInformações.saídasColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'saídas\' in table \'Informações\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInformações.saídasColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string retornos {
                get {
                    try {
                        return ((string)(this[this.tableInformações.retornosColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'retornos\' in table \'Informações\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInformações.retornosColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string vendas {
                get {
                    try {
                        return ((string)(this[this.tableInformações.vendasColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'vendas\' in table \'Informações\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInformações.vendasColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspessoaNull() {
                return this.IsNull(this.tableInformações.pessoaColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpessoaNull() {
                this[this.tableInformações.pessoaColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfuncionárioNull() {
                return this.IsNull(this.tableInformações.funcionárioColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfuncionárioNull() {
                this[this.tableInformações.funcionárioColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssaídasNull() {
                return this.IsNull(this.tableInformações.saídasColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsaídasNull() {
                this[this.tableInformações.saídasColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsretornosNull() {
                return this.IsNull(this.tableInformações.retornosColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetretornosNull() {
                this[this.tableInformações.retornosColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvendasNull() {
                return this.IsNull(this.tableInformações.vendasColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvendasNull() {
                this[this.tableInformações.vendasColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ItensRow : System.Data.DataRow {
            
            private ItensDataTable tableItens;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItensRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableItens = ((ItensDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string referência {
                get {
                    try {
                        return ((string)(this[this.tableItens.referênciaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'referência\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.referênciaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string peso {
                get {
                    try {
                        return ((string)(this[this.tableItens.pesoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'peso\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.pesoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string índice {
                get {
                    try {
                        return ((string)(this[this.tableItens.índiceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'índice\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.índiceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string saída {
                get {
                    try {
                        return ((string)(this[this.tableItens.saídaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'saída\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.saídaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string retorno {
                get {
                    try {
                        return ((string)(this[this.tableItens.retornoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'retorno\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.retornoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string venda {
                get {
                    try {
                        return ((string)(this[this.tableItens.vendaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'venda\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.vendaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string grupo {
                get {
                    try {
                        return ((string)(this[this.tableItens.grupoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'grupo\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.grupoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string faixa {
                get {
                    try {
                        return ((string)(this[this.tableItens.faixaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'faixa\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.faixaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string descrição {
                get {
                    try {
                        return ((string)(this[this.tableItens.descriçãoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'descrição\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.descriçãoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string acerto {
                get {
                    try {
                        return ((string)(this[this.tableItens.acertoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'acerto\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.acertoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool depeso {
                get {
                    try {
                        return ((bool)(this[this.tableItens.depesoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'depeso\' in table \'Itens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItens.depesoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreferênciaNull() {
                return this.IsNull(this.tableItens.referênciaColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreferênciaNull() {
                this[this.tableItens.referênciaColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspesoNull() {
                return this.IsNull(this.tableItens.pesoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpesoNull() {
                this[this.tableItens.pesoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsíndiceNull() {
                return this.IsNull(this.tableItens.índiceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetíndiceNull() {
                this[this.tableItens.índiceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssaídaNull() {
                return this.IsNull(this.tableItens.saídaColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsaídaNull() {
                this[this.tableItens.saídaColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsretornoNull() {
                return this.IsNull(this.tableItens.retornoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetretornoNull() {
                this[this.tableItens.retornoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvendaNull() {
                return this.IsNull(this.tableItens.vendaColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvendaNull() {
                this[this.tableItens.vendaColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgrupoNull() {
                return this.IsNull(this.tableItens.grupoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgrupoNull() {
                this[this.tableItens.grupoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfaixaNull() {
                return this.IsNull(this.tableItens.faixaColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfaixaNull() {
                this[this.tableItens.faixaColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriçãoNull() {
                return this.IsNull(this.tableItens.descriçãoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriçãoNull() {
                this[this.tableItens.descriçãoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsacertoNull() {
                return this.IsNull(this.tableItens.acertoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetacertoNull() {
                this[this.tableItens.acertoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdepesoNull() {
                return this.IsNull(this.tableItens.depesoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdepesoNull() {
                this[this.tableItens.depesoColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InformaçõesRowChangeEvent : System.EventArgs {
            
            private InformaçõesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InformaçõesRowChangeEvent(InformaçõesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InformaçõesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ItensRowChangeEvent : System.EventArgs {
            
            private ItensRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItensRowChangeEvent(ItensRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItensRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591